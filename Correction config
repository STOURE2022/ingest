"""
Module config.py
----------------
Gestion de la configuration du pipeline :
- D√©tection automatique de l'environnement (local / Databricks)
- Chargement des chemins de base (ZIP, Excel, logs, etc.)
- Lecture via widgets Databricks si disponibles
"""

import os


# =========================================================
# üîß D√©tection environnement
# =========================================================
def is_databricks():
    """
    Retourne True si le code tourne sur un cluster Databricks.
    """
    return "DATABRICKS_RUNTIME_VERSION" in os.environ


# =========================================================
# ‚öôÔ∏è Lecture configuration globale
# =========================================================
def get_config():
    """
    Retourne la configuration selon l‚Äôenvironnement.
    Si Databricks : lit les widgets s‚Äôils existent.
    Sinon : utilise les chemins locaux.
    """
    if is_databricks():
        print("‚öôÔ∏è Configuration Databricks d√©tect√©e ‚úÖ")
        try:
            dbutils.widgets.text("zip_path", "dbfs:/FileStore/tables/wax_delta_from_historized.zip", "üì¶ ZIP Source")
            dbutils.widgets.text("excel_path", "dbfs:/FileStore/tables/custom_test2_secret_conf.xlsx", "üìë Excel Config")
            dbutils.widgets.text("extract_dir", "dbfs:/tmp/unzipped_wax_csvs", "üìÇ Dossier Extraction ZIP")
            dbutils.widgets.text("log_exec_path", "dbfs:/mnt/logs/exec", "üìù Log Ex√©cution (Delta)")
            dbutils.widgets.text("log_quality_path", "dbfs:/mnt/logs/quality", "üßæ Log Qualit√© (Delta)")

            config = {
                "zip_path": dbutils.widgets.get("zip_path"),
                "excel_path": dbutils.widgets.get("excel_path"),
                "extract_dir": dbutils.widgets.get("extract_dir"),
                "log_exec_path": dbutils.widgets.get("log_exec_path"),
                "log_quality_path": dbutils.widgets.get("log_quality_path"),
            }
        except Exception:
            # Fallback si les widgets ne sont pas dispo
            config = {
                "zip_path": "dbfs:/FileStore/tables/wax_delta_from_historized.zip",
                "excel_path": "dbfs:/FileStore/tables/custom_test2_secret_conf.xlsx",
                "extract_dir": "dbfs:/tmp/unzipped_wax_csvs",
                "log_exec_path": "dbfs:/mnt/logs/exec",
                "log_quality_path": "dbfs:/mnt/logs/quality",
            }

    else:
        print("‚öôÔ∏è Configuration locale charg√©e ‚úÖ")
        base_path = os.path.dirname(__file__)
        config = {
            "zip_path": os.path.join(base_path, "../data/input/wax_delta_from_historized.zip"),
            "excel_path": os.path.join(base_path, "../data/input/custom_test2_secret_conf.xlsx"),
            "extract_dir": os.path.join(base_path, "../data/tmp/unzipped_wax_csvs"),
            "log_exec_path": "./logs/exec",
            "log_quality_path": "./logs/quality",
        }

    return config
